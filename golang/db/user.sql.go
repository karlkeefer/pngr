// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, salt, pass, status, verification)
  VALUES (LOWER($1::varchar), $2::varchar, $3::varchar, $4::user_status, $5::varchar) RETURNING id, email, pass, salt, status, verification, created_at, updated_at
`

type CreateUserParams struct {
	Email        string     `json:"email"`
	Salt         string     `json:"salt"`
	Pass         string     `json:"pass"`
	Status       UserStatus `json:"status"`
	Verification string     `json:"verification"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.Salt,
		arg.Pass,
		arg.Status,
		arg.Verification,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Pass,
		&i.Salt,
		&i.Status,
		&i.Verification,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id, email, pass, salt, status, verification, created_at, updated_at FROM users WHERE email = LOWER($1) LIMIT 1
`

func (q *Queries) FindUserByEmail(ctx context.Context, lower string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByEmail, lower)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Pass,
		&i.Salt,
		&i.Status,
		&i.Verification,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUserByID = `-- name: FindUserByID :one
SELECT id, email, pass, salt, status, verification, created_at, updated_at FROM users WHERE id = $1 LIMIT 1
`

func (q *Queries) FindUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Pass,
		&i.Salt,
		&i.Status,
		&i.Verification,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUserByVerificationCode = `-- name: FindUserByVerificationCode :one
SELECT id, email, pass, salt, status, verification, created_at, updated_at FROM users WHERE verification = $1 LIMIT 1
`

func (q *Queries) FindUserByVerificationCode(ctx context.Context, verification string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByVerificationCode, verification)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Pass,
		&i.Salt,
		&i.Status,
		&i.Verification,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users SET salt = $2, pass = $3, updated_at = NOW() WHERE id = $1
`

type UpdateUserPasswordParams struct {
	ID   int64  `json:"id"`
	Salt string `json:"salt"`
	Pass string `json:"pass"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.ID, arg.Salt, arg.Pass)
	return err
}

const updateUserStatus = `-- name: UpdateUserStatus :exec
UPDATE users SET status = $2, updated_at = NOW() WHERE id = $1
`

type UpdateUserStatusParams struct {
	ID     int64      `json:"id"`
	Status UserStatus `json:"status"`
}

func (q *Queries) UpdateUserStatus(ctx context.Context, arg UpdateUserStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateUserStatus, arg.ID, arg.Status)
	return err
}
