// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package db

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, salt, pass, status, verification) VALUES (LOWER($1), $2, $3, $4, $5) RETURNING id, email, pass, salt, status, verification, created_at, updated_at
`

type CreateUserParams struct {
	Lower        string     `json:"lower"`
	Salt         string     `json:"salt"`
	Pass         string     `json:"pass"`
	Status       UserStatus `json:"status"`
	Verification string     `json:"verification"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Lower,
		arg.Salt,
		arg.Pass,
		arg.Status,
		arg.Verification,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Pass,
		&i.Salt,
		&i.Status,
		&i.Verification,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id, email, pass, salt, status, verification, created_at, updated_at FROM users WHERE email = LOWER($1) LIMIT 1
`

func (q *Queries) FindUserByEmail(ctx context.Context, lower string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByEmail, lower)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Pass,
		&i.Salt,
		&i.Status,
		&i.Verification,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUserByVerificationCode = `-- name: FindUserByVerificationCode :one
SELECT id, email, pass, salt, status, verification, created_at, updated_at FROM users WHERE verification = $1 LIMIT 1
`

func (q *Queries) FindUserByVerificationCode(ctx context.Context, verification string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByVerificationCode, verification)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Pass,
		&i.Salt,
		&i.Status,
		&i.Verification,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserStatus = `-- name: UpdateUserStatus :exec
UPDATE users SET status = $2, updated_at = $3 WHERE id = $1
`

type UpdateUserStatusParams struct {
	ID        int64      `json:"id"`
	Status    UserStatus `json:"status"`
	UpdatedAt time.Time  `json:"updated_at"`
}

func (q *Queries) UpdateUserStatus(ctx context.Context, arg UpdateUserStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateUserStatus, arg.ID, arg.Status, arg.UpdatedAt)
	return err
}
